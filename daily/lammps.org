#+DATE: <2019-07-08 Mon>
#+STARTUP: SHOWALL
#+TAGS: lammps, sw
#+TODO: TODO(t) | DONE(d)

** lammps
*** 基本优化过程
   主核跑通, 纯净版, 之后再优化 eff 模块, 优化过程参照 lj 与 tersoff

   原本的代码会出现运行时的错误

*** 当前的几个可运行版本:  
    - bk        :: main
    - main      :: main
    - pure      :: main
    - stable    :: main
    - z1        :: md1
    - zhu       :: md1
    - lammps-11 :: md2
*** 几个注意的问题 
    - 位置: 当前目录下的几个文件, ybj 下的几个文件
    - 编译方式: sunway or mpi(主要不记得当初跑通的时候的编译方式)
 
*** 纯净版的选定
**** TODO 原版的编译运行结果
     DEADLINE: <2019-07-08 Mon 19:10-19:40>
***** 需要考虑的因素
      - 编译方式及编译文件的选择
***** step  [10/10]
****** DONE 找到项目代码
       CLOSED: [2019-07-08 Mon 19:43] DEADLINE: <2019-07-08 Mon 19:25>
****** DONE 编译 mpi 版本(不加入 lmp 与 make.sunway)
       CLOSED: [2019-07-08 Mon 19:42] DEADLINE: <2019-07-08 Mon 19:35>
****** DONE 找到测试样例
       CLOSED: [2019-07-08 Mon 19:43] DEADLINE: <2019-07-08 Mon 19:40>
****** DONE 运行 mpi 版本
       CLOSED: [2019-07-08 Mon 19:43] DEADLINE: <2019-07-08 Mon 19:45>
       依旧出现 reallocate 问题
****** DONE 加入 lmp 重新编译运行, 此时依旧使用 mpi
       CLOSED: [2019-07-08 Mon 19:48] DEADLINE: <2019-07-08 Mon 19:50>
       问题依旧
****** DONE 加入 make.sunway 进行编译运行
       CLOSED: [2019-07-08 Mon 20:49] DEADLINE: <2019-07-08 Mon 21:00>
       单核正在测试, 多核组依旧有问题, 也就是无论如何多核组还是会出现问题
       单核组貌似在运行第一步时就会卡住
****** DONE 进行文件重新编译的再次测试
       CLOSED: [2019-07-08 Mon 20:56] DEADLINE: <2019-07-08 Mon 20:15>
       问题依旧, 20:50 再跑一次, 但多核组不能跑就是有问题, 单核可运行
****** DONE 换提交参数
       CLOSED: [2019-07-08 Mon 21:12] DEADLINE: <2019-07-08 Mon 21:05>
       问题依旧
****** DONE 换一组 eff 测试样例
       CLOSED: [2019-07-08 Mon 21:19] DEADLINE: <2019-07-08 Mon 21:25>
****** DONE 换一组类型测试样例
       CLOSED: [2019-07-08 Mon 21:19] DEADLINE: <2019-07-08 Mon 21:35>
***** 可能的编译方式
      在纯净版中是以 mpi 方式编译, 而对于 md1 版本则是以 sunway 版本编译
**** DONE 运行 md1 版本, 观察其是否能够运行
     CLOSED: [2019-07-08 Mon 21:39] DEADLINE: <2019-07-08 Mon 21:40>
     ok
***** 目的
      这个步骤只是验证 md1 版本的可行性, 但要修改的版本依旧为纯净版
**** DONE 运行 github 的版本
     CLOSED: [2019-07-09 Tue 16:00] DEADLINE: <2019-07-08 Mon 20:40-21:00>
***** DONE 将 git 库转到 server 中
      CLOSED: [2019-07-09 Tue 11:00] DEADLINE: <2019-07-09 Tue 10:50>
***** DONE 从后向前评估至少三个的内容
      CLOSED: [2019-07-09 Tue 11:38] DEADLINE: <2019-07-09 Tue 11:05>
      - 1st :: 提交版本, 只有 lj_sw, pair_sw, 但内容未看, 目前确定是没有 simd 的
      - 2nd :: 只给了一个测试样例
      - 3rd :: 给了 gptl 等几小处修改
***** DONE 运行两个版本
      CLOSED: [2019-07-09 Tue 11:38] DEADLINE: <2019-07-09 Tue 11:30>
****** DONE 1st
       CLOSED: [2019-07-09 Tue 11:38]
       成功运行, 第一阶段 200 步 69 秒, 与 md1 版性能一致
****** DONE 3rd
       CLOSED: [2019-07-09 Tue 11:38]
       由于上个例子成功运行, 这个例子暂时不进行测试
***** DONE 给出在能够运行的, 且性能最好的, 且最大可能不会出错的版本(没有任何 simd/doublev4 代码)
      CLOSED: [2019-07-09 Tue 12:07] DEADLINE: <2019-07-09 Tue 12:10>
      - ad255 :: newest
      - bbafa :: 存在向量化
      - 46913 :: 存在向量化/6 
      - 89cdc :: 存在向量化/6
      - 3c20c :: 原版同样存在 doublev4/4, 只在 reduce 中使用
***** 将 oldest 与 46913 版本带入
**** 版本 diff
***** step
      DEADLINE: <2019-07-09 Tue>
****** 46913
****** DONE 3c20c
       CLOSED: [2019-07-09 Tue 16:00] DEADLINE: <2019-07-09 Tue 15:50>
       - sunway.h
       - pair_lj_cut_sunway.cpp
       - pair_lj_cut_sw64.c
         只进行了 reduce 等几个简单的赋值

**** DONE 将已修改的部分放置到正确的版本中进行测试
     CLOSED: [2019-07-09 Tue 17:07] DEADLINE: <2019-07-09 Tue 16:30>
***** 目的
      在单个核组下跑通, 也就是需要与 th 下的到同样的结果
      ?? 全部跑通了??
***** step
****** DONE 建一个新的代码, 并 run
       CLOSED: [2019-07-09 Tue 16:35] DEADLINE: <2019-07-09 Tue 16:10>
****** DONE 移植 eff 与 Makefile.sunway
       CLOSED: [2019-07-09 Tue 16:35] DEADLINE: <2019-07-09 Tue 16:20>
       - pair_eff_cut_cpp
       - pair_eff_cut_sw.c
       - pair_eff_cut_sw.h
       - pair_eff_inline.h
****** DONE run
       CLOSED: [2019-07-09 Tue 16:35] DEADLINE: <2019-07-09 Tue 16:30>
       全部跑通
****** DONE 测试在多少 CG 能够正常运行
       CLOSED: [2019-07-09 Tue 16:51]
       最多可运行 10 个 CG
****** DONE 加入打印语句
       CLOSED: [2019-07-09 Tue 17:07] DEADLINE: <2019-07-09 Tue 17:00>
       测试其是否正常运行, 正常输出
**** TODO 准备所需文件
***** 目的
      希望按照 github 上改的流程进行更改
***** TODO step
****** TODO 整个 github 库
****** TODO 整个 lammps source code
****** TODO lmp, make.sunway, gptl
****** TODO 改进后的 eff

*** 文件夹命名方式
    - lammps     :: pure
    - lammps_2   :: pure
    - lammps_3   :: md1
    - lammps_git :: pure_new
    - lammps_st1 :: 在主核版本移植初步 eff 从核

*** 基本流程
    - 解压 lammps 与 lammps-sunway
    - 放入 lmp 与 makefile, gptl.h
    - 编译(make yes + sunway)



* 报告
  
** 项目进展情况, 是否有望取得价值研究成果
   DEADLINE: <2019-07-22 Mon 09:10>
   我这阶段所做的工作大部分也主要还是在主核调试和从核优化部分
   - 首先主核经过调通能够正常运行, 经测试性能较太湖之光上有 10%左右的提升
   - 对于从核部分, 由于对于我优化的这个模块基本是从 0 开始做的, 所有主要计划有三个方面的工作, 分别是计算在多核上的分布, rma 和向量化的使用
     其中计算分布, rma 基本已经完成
   - 在现在还未完全利用所有从核核心的情况且未做向量化的情况下, 实测性能大概有 4 倍左右的提升
   现在还未解决的问题, 也是当前可能对性能有最大影响的部分
   - 在两层粒子进行迭代的时候, 粒子与粒子之间有耦合, 导致内层粒子需要等外层处理完再进行数据传递, 粒子之间的耦合也是从核核心没用满的主要原因
     之后我想, 这个内层粒子可以单独处理, 在传数据不需要与外层粒子一起, 这样基本就能解决这个耦合问题
    
   当前已经将这个项目的一两个样例跑了起来, 并打算在性能优化和正确性调校之后, 分别将剩下的更大规模的样例跑通

** 目前遇到的问题, 需要的技术支持
   DEADLINE: <2019-07-22 Mon 09:25>
   

** 下一步计划, 通过试算, 有望获得的研究成果产出目标
   DEADLINE: <2019-07-22 Mon 09:40>


** 差旅费用
   DEADLINE: <2019-07-22 Mon 09:45>
   前两次: 3200
   第三次: 2770
   第四次: 3320
   共计:   9290


1. 纯主核版本 compiled and passed, 但是无法顺利运行, 且无法无打印输出
    --> 当前办法, 从程序入口开始逐步调试, 找出报错问题根源所在

2. 在pair_eff_inline.h出现浮点错误
    --> 前后打印尝试

3. compute()无法跑通
    --> 打印调试
    --> 从line 105开始对所有原子进行迭代计算, 直到最后函数末尾
    --> 在对所有的原子进行迭代, 当进行到一定次数的时候, 会出现浮点异常
    --> 单核组无法跑通所有atom
    --> 但多核组可以跑通所有atom, 可以跑到最后一行, 但此时也会发生浮点异常
    --> 也就是说在跑多核组的时候, 是有一个核组不会影响到的??

4. compute()中浮点异常
    --> 多个核组异常位置不同
    --> 异常位置可知(根据pc值)
    --> 打印
    --> exp_term / x2 语句出现错误, 其中exp_term为0, 当前问题是可能x2出现为0的情况
         --> 哪个地方出现0, 应不应该出现0
    --> x = a * rc, a = sqrt(2) / re ;; re 为eradius, rc为0
    --> rc = sqrt(rsq) ;; 其中rsq是坐标的计算值
    --> 在最初的几个
    --> 换个样例
    --> 调用   
             ElecNucElec
             ElecElecElec
             ElecCoreNuc
             ElecCoreCore
	     ElecCoreElec
     --> i,j,ii,jj的意义, inum, ilist
             inum: 当前neighlist的粒子
             jnum: 当前neighlist的相邻neigh
     --> 如何在不把错误的输出忽略掉的情况下找到错误产生的位置(精准定位到发生错误的轮次及位置)
         --> 由于错误出现于浮点运算, 所以目的是找出当前调用函数(错误函数)的上层函数调用位置, 在这个程序中, 也就是自旋的0/1组合位置
     --> 找出错误的位置, 以及当前样例中发生错误的位置
     --> 1. 先找出位置, 但此位置可能由于异常的发生而导致不准确
         --> 当前评估是在ee部分发生的错误(在错误发生前所有的进行的分支都是ee, 且最后一个分支是ee), 但不能否定是由于误差而导致的错误
             --> 验证方法: 在每个调用前后都进行打印, 如果只有ee后(最后一个)不输出, 那么一定是该分支, 这里统一使用fprintf(stderr)
             --> 结论: 错误的最后一个发生在ee，且只打印了调用前
             --> 问题: 错误发生在ne中, 且错误为eradius为0, 但此时只有一个输出
             --> 方法: 已打印出多个eradius值, 都为0
             --> 问题: 所打印出来的都是0, 但是ee中的两个re却并不是零
             --> 方法: 重新编译一个新的项目
         2. 找到两个样例发生错误的轮数, 给出这个轮数的代表意义, 并找出可能错误的原子, 因为当前推断的是某一个粒子的rc值, 及粒子位置赋值不正确

5. ElecElecElec:  电子与电子
   Nuc: 代表原子
   spin: 粒子自旋, 通过粒子自旋可以知道所计算粒子的类型, 0为原子, 1为电子
   coul: 库仑
   eradius: 粒子半径

6. 问题: 由于主核版本问题, eff无法正常运行
         当前直接对从核版本进行移植

7. 方向
   寄存器通信: 使用rma进行替换
      --> sunway.h(全部封装到reg_reduce_inplace_doublev4()中)
   向量化类型(doublev4 -> doublev8, intv8->intv16, 包括simd函数用法)
      --> 将数据由四个double改为8个double
      --> 使用simd_set_doublev8()直接将后四位变为0
   athread: 直接加入crts进行替换
   dma.h

8. sunway.h
    1) 从核加入 <crts.h>
    2) 寄存器通信, 向量化doublev4
        --> 按行执行, 先每两个进行通信, 再四个进行通信 
        --> 再对行号为1的按列执行
        --> len代表doublev4的个数
        --> arr+j代表arr中的第几个doublev4, _ROW表示目的行号

9. 在调用处改动doublev8
   创建两个doublev4, 分别赋给eng_vdwl, eng_coul, virial
     --> 当前的想法是将两个doublev4直接传给单个doublev8, 也就是在reduce的时候直接reduce一个即可
     --> 直接赋0, 直接使用doublev8而不是数组

10. poly_math
    --> pair_tersoff
    --> vsinnpi_pid(), vcosnpi_pid(), vexpd(), vpowd()
    --> 如果有doublev16的接口时的变动
    --> 使用了simd数学库, 但原来是doublev4, 原来做的人直接放的编译之后的版本, 
    --> 当前机器上对于sin,cos,exp...有没有数学库
    --> 方法: 找山大的开发人员

11. 既然数据类型的长度改变了, 那么指令所支持的长度也一定会随之改变
    注: 接口手册未改

12. int256 --> intv16, 后面暂时赋相同的值(还是直接赋0) 

13. shfw指令的作用: 将两个向量数据合并为一个

14. transpose中的shff已经利用上了v8, 直接改动实参即可, 也就是两个transpose
    这里需要将fc对应修改, 直接copy
    

15. tersoff
    --> param3/param2(先确定调用方法, 再根据调用方法修改)
      --> transpose
        --> vshuffd_rc()待改动, 了解四个二进制的含义
      --> asm
      --> 直接计算
      --> 调用库计算
    --> transpose
      --> 调用了13次, 其中5次使用了param2/3
      --> 其中使用的参数都需要改为doublev8(改成doublev8是否正确)
      --> 改动xj_v4, jatom_v4, type_v4(变量名暂时不动) 
        --> 需要把jatom_v4的操作改动

16. 32位对齐的意义是dma操作

17. vshff
    --> 原来的: fc有8位, doublev4共4个double, 每两位控制一个64bit, 原来是四位来自va(两个double), 后四位来自vb
    --> 改动后的: fc有80位, 每5位控制一个32bit, 其中高一位表示来自va/vb, 其余4位表示来自其对应的32bit
        例: (va 与 vb相同时)2301 --> 0000 2301 --> 54761032 --> (对于2)0(最高位控制位)0010
    --> 改动位置: transpose, simd_vsumd
      --> 其中transpose中高位指的是va/vb, 且放在vc的高位还是低位未知(这个应该是对应高位), 暂时理解为va/高位, 按照test_cpc处理, 前四置一，后四置零



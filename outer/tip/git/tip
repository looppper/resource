1. git clone -b step-1 https://github.com/lotabout/write-a-C-interpreter

2. git remote add origin https://github.com/ihuaqing/leo.git

3. git push -u origin master
# origin: 远程仓库在本地的默认简称 master: 主分支 -u: 设置默认上游

4. git add *

5. git commit -m "what to change"

6. 合并: git pull



# 利用ssh进行无密码提交

1. ssh-keygen -t rsa #
2. 进入github的设置并上传id_rsa.pub
3. 之后在提交使用ssh方式clone的项目时都不需要密码了(不支持https)

cat sen-li.pub >> authorized_keys





















#+caption: 不常用



git clone --bare: 创建直接的git目录

git config --global ...(user.name/user.email/core.editor/merge.tool)

git config --list
(global选项指的是对用户主目录下所有项目使用此配置, 去掉global则只在用户项目目录下更改配置config)


git add */*.c/file.c
// 将那些文件纳入版本控制

git clone git://... [myhouse]

git status: 查看当前项目状态

添加.gitignore来配置不进行提交的文件
1) file
2) *.c
3) doc/     #dictionary
4) doc/*.txt
5) !lib
6) *.[ao]
7) log/\*.log #log目录下的所有*.log文件，并进行递归展开(不加反斜杠不会递归展开,反斜杠是git自己的文件模式扩展匹配方式)
8) ...


git diff: 比较当前文件与暂存区域快照的差异
git diff --cached: 比较暂存区域与上次提交时的差异


git commit  #此时启用默认编辑器进行提交信息编辑(之后注释在提交到服务器上时会被去掉)
git commit -m "something" #进行直接提交
( 反馈信息: 分支，SHA-1校验和, 更改信息 )
git commit -a: 把所有跟踪过的文件暂存起来并且提交


git rm file 
# 删除文件同时给一个标记
(如果先直接rm了，就需要先add或git rm一下)
git rm --cached file #只把file从跟踪清单中清除出去,此时为跟踪文件会出现file

git mv file1 file2
git mv file dic/
两个操作相同, 1. mv  2. git rm  3, git add 

git log
提供SHA-1校验和，作者信息，时间信息,操作信息

git log [file]
对某个文件进行查看

git log -p -2
展开显示每次提交的内容差异，-2表示最近两次

git log --stat
表示只进行简要行数的增改显示

git log --pretty=oneline/short/full/fuller

git log --pretty=format:"%h %s"

%H 提交对象（ commit）的完整哈希字串
%h 提交对象的简短哈希字串
%T 树对象（ tree）的完整哈希字串
%t 树对象的简短哈希字串
%P 父对象（ parent）的完整哈希字串
%p 父对象的简短哈希字串
%an 作者（ author）的名字
%ae 作者的电子邮件地址
%ad 作者修订日期（可以用 -date= 选项定制格式）
%ar 作者修订日期，按多久以前的方式显示
%cn 提交者 (commiĴer) 的名字
%ce 提交者的电子邮件地址
%cd 提交日期
%cr 提交日期，按多久以前的方式显示
%s 提交说明

[作者(author)与提交者(committer)的区别]
作者指的是仓库所有者，提交者指的是某个核心成员对项目并入补丁时的那个人

git log --pretty=format:"%h %s" --graph
将分支及分支衍合情况进行展示

git log --since/after=2.weeks (两周内)
git log --until/before=2.weeks (两周前)
git log --since="2017-04-26" (两周前
git log -2 (两次)
git log --author=[name]

图形化界面: gitk

撤销操作

git commit --amend
# 直接调用默认编辑器，进行上次提交信息的修改
# 如果要补充提交，则要在撤销操作前进行操作


git reset HEAD [file]
# 撤销刚才的操作[add/delete/...]

git checkout -- [file]
# 撤销刚才的修改,很危险(因为此时数据还没有被提交，如果误操作将彻底丢失)


2.5 操作远程仓库

git remote

git remote -v(verbose: 详细的)

git fetch [remote-name]
# 抓取服务器下的数据,抓取后不自动进行合并

git pull
# 抓取后自动进行合并

git push origin master
# 向服务器上推送数据，只有当推送的机器上有写权限且同一时刻没有其他人在推送数据才能成功推送，否则会驳回请求
# 此时你必须把它抓取到本地进行合并后才可以再次推送

git remote rename name1 name2
# 修改远程仓库在本地的简称

git remote rm house
# 删除远程仓库


2.6 打标签

git tag
# 查询标签

git tag -l "v1.*"
# 只对某个系列的标签感兴趣

git tag -a v1.4 -m "my tag v1.4"
#　添加含附注的标签

git tag v1.8
# 添加轻量级标签

git tag [标签号]
# 查询对应标签下的操作

git push origin [tagname]
# 由于git不会提交标签，所以需要显式提交

git push origin --tags
# 将标签全部提交

2.7

git config --global alias.last 'log -1 HEAD'
# 设置命令别名

git config --global alias.ll '!ls -al'
# 设置外部命令别名
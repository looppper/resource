#+date: <2019-06-24 周一>

由于时间比较紧, 就直接写报告了

不知道什么时候, 又开始回忆起自己当初以为自己可以厉害到自己赚钱了, 而现在不就正是自己发挥的时候吗

2015-2040 结尾
2040-2130 最后一篇
2130-2210 总结
2210-2300 格式(word)

* Arch

** Kpart
这篇文章延续了上一篇UCP的思想, 同样是使用way-partition的方法进行cache的划分, 但却在方法和结构上进行了很大的改进, 在原有的UCP中, 对所要分配的应用进行统一处理, 而应用与应用之间不作区分, 也就是分配cache way是以单个应用作为单位的, 而这篇文章提出了一种混合划分的思想, 从某种程度上避免了way partitioning的缺陷
首先文章给出的方法是以组(cluster)为单位, 而不是单纯地以一个应用为单位, 并且在这些组之间进行cache way的分配, 而且使用了一种改进后的划分算法来对不同大小的组之间的性能进行评估, 并选出其中性能最好的组合.
其次, 也提出了一个性能更加友好的系统性能监控工具, 能够以更低的开销进行更加准确的实时性能评估, 并以在多个应用之间测试不同的划分大小，使用基础性能计数器给出负载执行时应用cache需求

*** DynaWay
这篇文章提出了一个更加有效的性能监控工具--DynaWay, 它会将cache划分为两部分, 当前应用所占用的cache, 其他应用所共享的cache, 它会在固定周期内测量命中率, IPC, 带宽, 并生成固定曲线便于后续划分。
DynaWay与之前的工作有两项主要的改进方面, 第一点是测量间隔变长, 现在在40B个时钟周期内进行一个测量, 这样做的目的是通过减少测量的次数, 来减少开销。
第二点是进行一个"抽象"检测, 按照原来的情况, 对于A个应用,且有W个way的系统来说, 应当进行A·W次的测量, 经测试这样对总体性能的损害是很大的, 所以就在W个way中, 每奇数个进行profile, 这样不仅保证了精度, 也极大减少了开销。

*** algorithm
可以说这篇文章最主要的贡献就在于划分算法的改进方面, 不同于以往的工作, kpart将不同应用之间进行联系, 将应用与应用进行分组(cluster), 并在组内进行cache way的分配
由于在性能profile的部分, 我们已经找到了命中率, IPC与带宽, 在划分时我们可以进行更有效的处理, 其中IPC要比命中率对性能有着更直接的影响。
由于划分策略的不同, 这里在划分时遵循一个原则, 就是当两个应用共享一块cache与两个应用分别利用cache时的命中率变化有多少, 这里定义了两个关键的标志, combined miss curve与partitioned miss curve, 分别代表共享状态与划分状态下的cache miss的总数。
这里kpart使用一个特殊的分组算法, 这个算法进行多次迭代, 在每次迭代的时候, 它都会尝试找出combined miss curve与partitioned miss curve中最接近的那个应用, 并且执行合并操作, 直到最后合并为一个应用为止。
如下图所示, 当系统中存在6个应用时, 由于两两之间进行合并, 在进行五次迭代之后, cluster数K会从6变为1
[pic]
在对不同应用之间进行划分之后, 就要为不同组的应用之间分配cache了, 在cluster情况给定之后, 也就是cluster数量K固定之后, 会使用一个优化的lookahead算法来为不同的cluster进行cache way的分配, 这个算法与传统的ahead算法的不同在于, 它使用了一个不同的性能评价标准, 不同于原来简单使用cache miss评价性能, 这里使用speedup作为标准, 而speedup又是划分后IPC与划分前IPC的比值, 这样更加能否反映出cache的数量对应用性能的影响。
而在计算完每个应用的加速比之后, 则可以利用求和操作来计算总的系统的加速比
[给出公式]
而一旦每组的加速比计算完成之后, 就可以直接利用Lookahead算法来查找产生最大性能提升的划分组合。
这篇文章的另一个发现就是, 在实际的操作中, 对于内存带宽, 常常达到最大的饱和量, 从而影响不同应用的性能, 造成划分时的差异。因此, 在这篇工作中, kpart会使用带宽曲线来估计总的带宽消耗, 一旦发现带宽使用量达到了或可能超过了系统内存带宽, 则会通过降低IPC值来将其保持在系统内存带块之内。
在上面给出不同种的划分策略之后, 还有一件重要的事情就是找到最合适的K值, 也就是性能最好的组合, 这也就是为什么使用speedup作为标准而不是选用miss rate的原因, 这里经过实验, speedup能够比命中率得出性能更好的划分组合。
